[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.project_version}}"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}"
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.project_name}}"
packages = [{include = "{{cookiecutter.package_name}}", from = "src"}]

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"
fastapi = "^0.108.0"
pydantic-settings = "^2.1.0"
uvicorn = "^0.25.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-sugar = "^0.9.5"
pytest-clarity = "^1.0.1"
pytest-random-order = "^1.0.4"
pytest-cov = "^3.0.0"
coverage = {extras = ["toml"], version = "^6.4.4"}
safety = "^2.1.1"
black = "^22.8.0"
ruff = "^0.1.9"
isort = "^5.10.1"
mypy = "^0.971"
Faker = "^21.0.0"
httpx = "^0.26.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
source = [
  "main",
  "tests",
]

[tool.coverage.report]
fail_under = 100
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  # "if TYPE_CHECKING:",
  # "if typing.TYPE_CHECKING:"
  "if platform.system()",
]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
addopts = ["--random-order", "-q"]
markers = [
    "windows_only: mark a test as Windows-only",
    "linux_only: mark a test as Linux-only"
]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
exclude = "tests"

[tool.isort]
profile = "black"
atomic = true
line_length = {{cookiecutter.line_length}}
use_parentheses = true

[tool.black]
line_length = {{cookiecutter.line_length}}
include = '\.pyi?$'

[tool.ruff]
line-length = {{cookiecutter.line_length}}
ignore = []
extend-exclude = []
